<?php
/**
 * Created by PhpStorm.
 * User: szrh
 * Date: 2019/4/11
 * Time: 10:53
 */
namespace app\index\controller;

use app\index\model\Profile;
use app\index\model\Book;

use app\index\model\User as UserModel;
use app\index\model\Role as RoleModel;
use think\Controller;

class User extends Controller
{

    public function _initialize()
    {
        parent::_initialize(); // TODO: Change the autogenerated stub
        $this->view->replace([
            '__PUBLIC__'    =>  '/thinkphp/public',
        ]);
    }

    // 获取用户数据列表并输出
    public function index()
    {
        //$list = UserModel::all();
        $list = UserModel::paginate(3);

        $this->assign('list', $list);
        $this->assign('count', count($list));

        return $this->fetch();
    }

    /**
     * 用户列表
     *
     * @return mixed
     */
    public function user_list()
    {

        $list = UserModel::paginate(10);

        $this->assign('list', $list);
        $this->assign('count', count($list));

        return $this->fetch();
    }

    /**
     * 角色列表
     *
     * @return mixed
     */
    public function role_list()
    {
        $list = RoleModel::all();

        $this->assign('list', $list);
        $this->assign('count', count($list));
        return $this->fetch();
    }

    /**
     * 增加新角色
     *
     * @return mixed
     */
    public function add_role()
    {
        return $this->fetch();
    }

    /**
     * 提交表单，增加新角色
     */
    public function do_add_role()
    {
        $data['role_name'] = $_POST['role_name'];
        $data['description'] = $_POST['description'];

        RoleModel::create($data);

        $this->redirect('user/role_list');

    }

    /**
     * 修改角色信息
     *
     * @param $id
     * @return mixed
     * @throws \think\exception\DbException
     */
    public function edit_role($id)
    {
        $role = RoleModel::get($id);
        $this->assign('role', $role);
        return $this->fetch();
    }

    /**
     * 保存修改角色信息
     *
     * @param $id
     */
    public function do_edit_role($id)
    {
        $data['role_name'] = $_POST['role_name'];
        $data['description'] = $_POST['description'];
        RoleModel::update($data, array('id' => $id));
        $this->redirect('user/role_list');
    }

    public function delete_role($id)
    {
        $role = RoleModel::get($id);
        if($role)
        {
            //删除该角色
            $role->delete();

            $this->redirect('user/role_list');
        }
        else
        {
            //该角色不存在
            $this->redirect('user/role_list');
        }
    }

    /**
     * 添加新用户
     *
     * @return mixed
     */
    public function add_user()
    {
        return $this->fetch();
    }

    /**
     * 保存添加新用户的信息
     *
     * @return array|string
     */
    public function do_add_user()
    {
        $data['username'] = $_POST['username'];
        $data['mobile'] = $_POST['mobile'];
        $data['email'] = $_POST['email'];
        $data['role_id'] = 1;
        $data['password'] = $_POST['password'];

        UserModel::create($data);
        $this->redirect('user/user_list');
    }

    /**
     * 删除用户
     *
     * @param $id
     * @throws \think\exception\DbException
     */
    public function delete_user($id)
    {
        $user = UserModel::get($id);
        if($user)
        {
            //删除该用户
            $user->delete();

            $this->redirect('user/user_list');
        }
        else
        {
            //该用户不存在
            $this->redirect('user/user_list');
        }
    }

    /**
     * 编辑用户信息
     *
     * @param $id
     */
    public function edit_user($id)
    {
        $user = UserModel::get($id);
        $this->assign('user', $user);
        return $this->fetch();
    }

    /**
     * 更新用户信息
     *
     * @param $id
     */
    public function do_edit_user($id)
    {
        $data['username'] = $_POST['username'];
        $data['mobile'] =   $_POST['mobile'];
        $data['email']  =   $_POST['email'];
        $data['role_id']    =   1;
        $data['password']   =   $_POST['password'];

        UserModel::update($data, array('id' => $id));
        $this->redirect('user/user_list');
    }

    // 批量新增用户数据
    public function addList()
    {
        $user = new UserModel;
        $list = [
            ['nickname' => '张三', 'email' => 'zhangsan@qq.com', 'birthday' => '1988-01-15'],
            ['nickname' => '李四', 'email' => 'lisi@qq.com', 'birthday' => '1990-09-19'],
        ];
        if($user->saveAll($list)){
            return '用户批量新增成功';
        } else {
            return $user->getError();
        }
    }

    // 读取用户数据
    public function read($id = '')
    {
        $user = UserModel::get($id);

        echo $user->name . '<br/>';
        echo $user->nickname . '<br/>';

        echo $user->profile->truename . '<br/>';
        echo $user->profile->email . '<br/>';
        //echo date('Y/m/d', $user->birthday) . '<br/>';
        echo $user->profile->birthday . '<br/>';

        echo $user->status . '<br/>';
        echo $user->create_time . '<br/>';
        echo $user->update_time . '<br/>';

        $books = $user->books;
        var_dump($books);
    }

    // 更新用户数据
    public function do_update($id)
    {
        $user       = UserModel::get($id);
        $user->name =   'framework';
        if($user->save()){
            // 更新关联数据
            $user->profile->email = 'liu21st@gmail.com';
            $user->profile->save();
            return '用户[ ' . $user->name . ' ] 更新成功';
        } else {
            return $user->getError();
        }

        /*
        $user->nickname =   '刘晨';
        $user->email    =   'liu21st@gmail.com';
        if(false !== $user->save()){
            return '更新用户成功';
        } else {
            return $user->getError();
        }*/

    }

    // 删除用户数据
    public function delete($id)
    {
        $user = UserModel::get($id);
        if($user->delete()){
            // 删除关联数据
            $user->profile->delete();
            return '用户[ ' . $user->name . ' ]删除成功';
        } else {
            return $user->getError();
        }
        /*
        if($user){
            $user->delete();
            return '删除用户成功';
        } else {
            return '删除的用户不存在';
        }
        */
    }

    // 创建用户数据页面
    public function create()
    {
        return view();
    }

}